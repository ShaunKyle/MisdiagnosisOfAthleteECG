[
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html",
    "href": "nbs/Marquette-SL12-misclassification.html",
    "title": "ECG machines are confused by athlete hearts",
    "section": "",
    "text": "Misclassification of athlete ECG by GE Marquette SL12 algorithm\nThis report will demonstrate that an existing that Marquette SL12 from General Electric, a clinical decision support software for diagnosis of cardiac health from electrocardiogram (ECG), consistently misdiagnoses elite athletes.\nFigure: Hardware for taking and processing ECG. Left - GE CAM acquisition module. Right - GE MAC VU360 electrocardiograph.\nTODO: crop GE CAM image to focus on chest diagram"
  },
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html#notebook-setup",
    "href": "nbs/Marquette-SL12-misclassification.html#notebook-setup",
    "title": "ECG machines are confused by athlete hearts",
    "section": "Notebook setup",
    "text": "Notebook setup\n\n\nClick to see packages imported\nimport os\nimport configparser\nfrom pathlib import Path\nfrom typing import TypedDict, List\nfrom enum import Enum\n\nimport wfdb\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np"
  },
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html#the-norwegian-athlete-ecg-dataset",
    "href": "nbs/Marquette-SL12-misclassification.html#the-norwegian-athlete-ecg-dataset",
    "title": "ECG machines are confused by athlete hearts",
    "section": "The norwegian-athlete-ecg dataset",
    "text": "The norwegian-athlete-ecg dataset\nThe Norwegian Endurance Athlete ECG Database (norwegian-athlete-ecg) contains 12-lead ECG recordings from 28 elite athletes from various sports in Norway. All recordings are 10 seconds resting ECGs recorded with a General Electric (GE) MAC VUE 360 electrocardiograph. All ECGs are interpreted with both the GE Marquette SL12 algorithm (version 23 (v243)) and one cardiologist with training in interpretation of athlete’s ECG. The data was collected at the University of Oslo in February and March 2020.\n\nathlete_ecg_dir = data_dir / \"norwegian-athlete-ecg\" / \"1.0.0\"\n\nAn example of the data for athlete ath_001 is shown below.\n\n# 12-lead ECG recording from subject ath_001\nrecord = wfdb.rdrecord(athlete_ecg_dir / \"ath_001\")\nwfdb.plot_wfdb(record=record, title='ath_001 from Norwegian Athlete ECG database')\n\n\n\n\n\n\n\n\n\n# Machine (SL12) and Cardiologist (C) interpretation of ath_001 ECG recording\nrecord = wfdb.rdheader(athlete_ecg_dir / \"ath_001\")\nrecord.__dict__[\"comments\"]\n\n['SL12: Sinus bradycardia with marked sinus arrhythmia, Right axis deviation, Borderline ECG',\n 'C: Sinus arrhythmia,  Normal ECG']\n\n\n\n\nPut ECG finding reports into a pandas dataframe\nclass AthleteReport():\n    athlete_id: str\n    cardiologist: str\n    machine: str\n\nreports_list = []\nfor i in range(1, 29):\n    athlete_id = f\"ath_00{i}\" if i &lt; 10 else f\"ath_0{i}\"\n    record = wfdb.rdheader(athlete_ecg_dir / athlete_id)\n    comments = record.__dict__[\"comments\"]\n    report: AthleteReport = {\n        \"athlete_id\": athlete_id,\n        \"cardiologist\": comments[1],\n        \"machine\": comments[0],\n    }\n    reports_list.append(report)\nathlete_ecg_df = pd.DataFrame(reports_list)\n\n\n\nathlete_ecg_df.head()\n\n\n\n\n\n\n\n\nathlete_id\ncardiologist\nmachine\n\n\n\n\n0\nath_001\nC: Sinus arrhythmia, Normal ECG\nSL12: Sinus bradycardia with marked sinus arrh...\n\n\n1\nath_002\nC: Sinus arrhythmia, Right axis deviation, Nor...\nSL12: Sinus bradycardia with marked sinus arrh...\n\n\n2\nath_003\nC: Normal sinus rhythm, Left axis deviation, B...\nSL12: Sinus bradycardia with marked sinus arrh...\n\n\n3\nath_004\nC: Normal sinus rhythm, Normal ECG\nSL12: Sinus bradycardia, Right axis deviation,...\n\n\n4\nath_005\nC: Sinus bradycardia, normal sinus rhythm, Fir...\nSL12: Sinus bradycardia and sinus arrhythmia a..."
  },
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html#findings-from-ecg-reports",
    "href": "nbs/Marquette-SL12-misclassification.html#findings-from-ecg-reports",
    "title": "ECG machines are confused by athlete hearts",
    "section": "Findings from ECG reports",
    "text": "Findings from ECG reports\nIn the norwegian-athlete-ecg dataset, findings in ECG reports are delimited by a comma (,). However, some machine findings also make use of a comma to make a follow-up comment on a finding. This is not done in any of the human cardiologist reports in the dataset.\nTable: Examples of findings with follow-up comment\n\n\n\n\n\n\n\nFinding with follow-up comment\nRecord\n\n\n\n\nMinimal voltage criteria for LVH, may be normal variant\nath_024\n\n\nST elevation, probably due to early repolarization\nath_024\n\n\nST elevation, consider early repolarization, pericarditis, or injury\nath_027\n\n\n\nFollow-up comments from SL12 all seem to start with a lower-case letter, so they can be detected this way.\nSome findings are also combined into one sentence using a conjunction word such as “and”.\ne.g. Sinus bradycardia and sinus arrhythmia and first degree AV block\n\n\nClick to see function for extracting a list of findings from a single line report\ndef extract_findings(report: str, follow_on: bool=True, split_and=True) -&gt; List[str]:\n    \"\"\"Extract a list of all findings in a single line cardiologist report\n    \"\"\"\n    comments = report.split(': ', maxsplit=1)[1].split(', ')\n    \n    # Also split multiple findings in a single comment joined by 'and'.\n    # e.g. Sinus bradycardia and sinus arrhythmia and first degree AV block\n    if split_and:\n        temp = []\n        for comment in comments:\n            for segment in comment.split('and'):\n                temp.append(segment)\n        comments = temp\n\n    # Cleanup (e.g. remove leading/trailing whitespace)\n    comments[:] = list(map(str.strip, comments))\n\n    if not follow_on:\n        return comments     # i.e. assume every comment is a new finding\n\n    # Combine follow-on comments with parent comment to produce full finding \n    # for SL12 machine comments.\n    #\n    # e.g. ST elevation, consider early repolarization, pericarditis, or injury\n    findings = []\n    for i, comment in enumerate(comments):\n        if comment[0].isupper() or comment[0] == '*':\n            findings.append(comment)\n        else:\n            findings[-1] = ''.join([findings[-1], \", \", comment])\n    return findings\n\n\n\n# Example usage of `extract_findings()`\nreport = athlete_ecg_df.loc[23].machine\nextract_findings(report)\n\n['Sinus bradycardia',\n 'Incomplete right bundle branch block',\n 'Minimal voltage criteria for LVH, may be normal variant',\n 'ST elevation, probably due to early repolarization',\n 'Borderline ECG']\n\n\n\n# Find every unique finding in dataset\nunique_findings_sl12 = []\nunique_findings_c = []\nfor i in range(1, 29):\n    athlete_id = f\"ath_00{i}\" if i &lt; 10 else f\"ath_0{i}\"\n    record = wfdb.rdheader(athlete_ecg_dir / athlete_id)\n    comments = record.__dict__[\"comments\"]\n\n    # Machine algorithm findings\n    findings_sl12 = extract_findings(comments[0])\n    for finding in findings_sl12:\n        if finding not in unique_findings_sl12:\n            unique_findings_sl12.append(finding)\n    \n    # Cardiologist findings\n    findings_c = extract_findings(comments[1], follow_on=False)\n    for finding in findings_c:\n        if finding not in unique_findings_c:\n            unique_findings_c.append(finding)\n\n\nunique_findings_c\n\n['Sinus arrhythmia',\n 'Normal ECG',\n 'Right axis deviation',\n 'Normal sinus rhythm',\n 'Left axis deviation',\n 'Borderline ECG',\n 'Sinus bradycardia',\n 'normal sinus rhythm',\n 'First degree AV block',\n 'Left ventricular hypertrophy',\n 'Incomplete right bundle branch block',\n 'Possible left ventricular hypertrophy',\n 'Left atrial enlargement',\n 'Misplaced electrodes',\n 'first degree AV block']\n\n\n\nunique_findings_sl12\n\n['Sinus bradycardia with marked sinus arrhythmia',\n 'Right axis deviation',\n 'Borderline ECG',\n 'Left axis deviation',\n 'Abnormal ECG',\n 'Sinus bradycardia',\n 'Sinus bradycardia, sinus arrhythmia, first degree AV block',\n 'Otherwise normal ECG',\n '***Critical test result: STEMI',\n 'Normal sinus rhythm',\n 'Pulmonary disease pattern',\n 'Incomplete right bundle branch block',\n 'Possible right ventricular hypertrophy',\n 'Cannot rule out inferior infarct age not determined',\n 'Anterolateral injury pattern',\n '** ** ACUTE MI/STEMI** **',\n \"RSR' or QR pattern in V1 suggests right ventricular conduction delay\",\n 'First degree AV block',\n 'Right atrial enlargement',\n 'Anterior infarction age not determined',\n 'Lateral injury pattern',\n 'Abnormal EKG',\n 'Normal sinus rhythm with sinus arrhythmia',\n 'Normal ECG',\n 'Marked sinus bradycardia',\n 'Lateral infarction age not determined',\n 'Sinus rhythm with first degree AV block',\n 'Sinus bradycardia with sinus arrhythmia',\n 'ST elevation consider anterolateral injury or acute infarction',\n 'Minimal voltage criteria for LVH, may be normal variant',\n 'ST elevation, probably due to early repolarization',\n 'Nonspecific intraventricular conduction delay',\n 'ST elevation, consider early repolarization, pericarditis, or injury',\n 'ST elevation consider anterolateral injury or acute infarct']\n\n\nTODO: Explain how we’re classifying different abnormalities.\nTODO: Explain which abnormalities are relevant for athlete misdiagnosis.\n\n# Classifying findings by the type of abnormality\n\nclass AbnormalityClass(Enum):\n    # overall = \"Overall ECG recording\"   # Normal/Abnormal/Borderline etc.\n    rhythm = \"Rhythm\"                   # e.g. sinus rhythm\n    conduction = \"Conduction\"           # e.g. bundle branch block, AV block\n    ischemia = \"Ischemia\"               # e.g. ST-segment, T-wave inversion\n    structural = \"Structural\"           # e.g. chamber enlargement, hypertrophy\n    measurement = \"Measurement\"         # e.g. axis deviation, wide QRS, PR interval\n    equipment = \"Equipment\"             # e.g. Misplaced electrodes\n    other = \"Other\""
  },
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html#disagreement-between-machine-and-cardiologist-findings",
    "href": "nbs/Marquette-SL12-misclassification.html#disagreement-between-machine-and-cardiologist-findings",
    "title": "ECG machines are confused by athlete hearts",
    "section": "Disagreement between machine and cardiologist findings",
    "text": "Disagreement between machine and cardiologist findings\nTODO: Explanation of why athlete is likely to be misinterpreted. ECG interpretation guidelines for athletes.\n\nOverall finding\nIt is common practice to give an ECG recording or segment of a recording an overall finding of “normal”, “borderline” or “abnormal” to aid clinical decision-making.\nIn the norwegian-athlete-ecg dataset, human cardiologists classified 2 recordings as “borderline”, and the remaining 26 as “normal”. Observing the difference in overall finding between human cardiologist and SL12 algorithm gives an idea of the difficulty of interpretation posed by each recording.\n\n\nExtract overall ECG findings from dataset and measure disagreement between C and SL12\n# The final finding in each report is an \"overall\" classification for the \n# entire ECG recording.\n\n# We can use the difference between machine and cardiologist `OverallFinding`\n# values to quantify if the disagreement is \"small\" or \"large\".\n\nclass OverallFinding(Enum):\n    Unknown = -99\n    Normal = 0\n    Borderline = 1\n    Abnormal = 2\n\ndef classifyOverallFinding(findings: List[str]) -&gt; OverallFinding:\n    \"\"\"Classifies the overall finding for an ECG recording.\n\n    Assumes that the final finding in `findings` list comments on overall \n    finding.\n    \"\"\"\n    overall = findings[-1].lower()\n    if overall.find(\"abnormal\") != -1:\n        return OverallFinding.Abnormal\n    elif overall.find(\"borderline\") != -1:\n        return OverallFinding.Borderline\n    elif overall.find(\"normal\") != -1:\n        return OverallFinding.Normal\n    else:\n        return OverallFinding.Unknown\n\n# Quantify the \"overall disagreement\" between cardiologist and SL12 algorithm.\ncount_0 = 0     # Agree\ncount_1 = 0     # Disagree (small)\ncount_2 = 0     # Disagree (large)\n\ncount_sl12_normal = 0\ncount_sl12_borderline = 0\ncount_sl12_abnormal = 0\n\nfor i in range(1, 29):\n    athlete_id = f\"ath_00{i}\" if i &lt; 10 else f\"ath_0{i}\"\n\n    record = wfdb.rdheader(athlete_ecg_dir / athlete_id)\n    comments = record.__dict__[\"comments\"]\n\n    findings_sl12 = extract_findings(comments[0])\n    findings_c = extract_findings(comments[1])\n\n    overall_sl12 = classifyOverallFinding(findings_sl12)\n    overall_c = classifyOverallFinding(findings_c)\n\n    if (overall_sl12.value - overall_c.value) == 0:\n        count_0 += 1\n    elif (overall_sl12.value - overall_c.value) == 1:\n        count_1 += 1\n    elif (overall_sl12.value - overall_c.value) == 2:\n        count_2 += 1\n    \n    if (overall_sl12 == OverallFinding.Normal):\n        count_sl12_normal += 1\n    elif (overall_sl12 == OverallFinding.Borderline):\n        count_sl12_borderline += 1\n    elif (overall_sl12 == OverallFinding.Abnormal):\n        count_sl12_abnormal += 1\n\n    # print(f\"{athlete_id} disagreement = {overall_sl12.value - overall_c.value}\\tc = {overall_c.name}\")\n\n\n\n\nPlot difference between C and SL12 overall findings\nsns.set_theme(style=\"ticks\")\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\nplt.suptitle(\"Difference in overall findings\")\n\n#\n# Stacked bar charts showing ratio of normal/borderline/abnormal findings\n#\n\ncolors = sns.color_palette('pastel')[5:8]\nreport_source = [\"Cardiologist\", \"SL12\"]\noverall_finding_labels = [\"Normal\", \"Borderline\", \"Abnormal\"]\noverall_findings_data = {\n    \"Normal\": np.array([26, count_sl12_normal]) / 28.0,\n    \"Borderline\": np.array([2, count_sl12_borderline]) / 28.0,\n    \"Abnormal\": np.array([0, count_sl12_abnormal]) / 28.0,\n}\n\n# Iteratively build stacked bar chart, one finding class at a time.\nbot_c = 0\nbot_sl12 = 0\ncolor_index = 0\nfor finding, counts in overall_findings_data.items():\n    ax1.bar(\n        report_source, \n        counts, \n        label=finding, \n        bottom=[bot_c, bot_sl12], \n        color=colors[color_index],\n    )\n    bot_c += counts[0]\n    bot_sl12 += counts[1]\n    color_index += 1\n\nax1.set_title(\"a) Proportion of overall findings\")\nax1.set_ylabel(\"Proportion of athletes in dataset\")\nax1.legend(loc=\"lower center\")\n\n# \n# Pie chart summarising overall disagreement\n#\n\ncolors = sns.color_palette('pastel')[2:5]\n\nax2.pie(\n    [count_0, count_1, count_2],\n    colors = colors,\n    autopct='%.0f%%',\n    pctdistance=0.6,\n)\n\nax2.legend(\n    [\"Agree\", \"Disagree (small)\", \"Disagree (large)\"],\n    bbox_to_anchor=(0.9, 0.05),\n)\nax2.set_title(\"b) Disagreement between \\nC & SL12 reports\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\nFigure: Difference in overall ECG recording finding between Cardiologist (C) and Machine (SL12) reports.\n\n\nAdd overall finding labels to pandas dataframe\nathlete_ecg_df = athlete_ecg_df.assign(\n    overall_c=list(map(lambda x: classifyOverallFinding( extract_findings(x, follow_on=False) ).name, athlete_ecg_df.cardiologist))\n)\n\nathlete_ecg_df = athlete_ecg_df.assign(\n    overall_sl12=list(map(lambda x: classifyOverallFinding( extract_findings(x, follow_on=True) ).name, athlete_ecg_df.machine))\n)\n\n\n\nathlete_ecg_df.head()\n\n\n\n\n\n\n\n\nathlete_id\ncardiologist\nmachine\noverall_c\noverall_sl12\n\n\n\n\n0\nath_001\nC: Sinus arrhythmia, Normal ECG\nSL12: Sinus bradycardia with marked sinus arrh...\nNormal\nBorderline\n\n\n1\nath_002\nC: Sinus arrhythmia, Right axis deviation, Nor...\nSL12: Sinus bradycardia with marked sinus arrh...\nNormal\nBorderline\n\n\n2\nath_003\nC: Normal sinus rhythm, Left axis deviation, B...\nSL12: Sinus bradycardia with marked sinus arrh...\nBorderline\nAbnormal\n\n\n3\nath_004\nC: Normal sinus rhythm, Normal ECG\nSL12: Sinus bradycardia, Right axis deviation,...\nNormal\nBorderline\n\n\n4\nath_005\nC: Sinus bradycardia, normal sinus rhythm, Fir...\nSL12: Sinus bradycardia and sinus arrhythmia a...\nNormal\nNormal\n\n\n\n\n\n\n\n\n\nRhythm findings\nTODO: Disagreement between cardiologist and machine for individual abnormality classes.\n\nclass SinusRhythmFinding(Enum):\n    Normal = 0\n    Bradycardia = 1     # Slow rhythm\n    Tachycardia = 2     # Fast rhythm\n    Arrhythmia = 3      # Other abnormal rhythm\n\ndef classifySinusRhythmFindings(comments: List[str]) -&gt; List[SinusRhythmFinding]:\n    \"\"\"Classifies sinus rhythm findings from an ECG findings report\n\n    Multiple rhythm findings could be present in a single comment. \n    e.g. 'Sinus bradycardia with marked sinus arrhythmia'\n\n    Returns a list of `SinusRhythmFinding`.\n    \"\"\"\n    findings = []\n    for c in comments:\n        c = c.lower()\n        if c.find(\"sinus\") != -1:\n            if c.find(\"arrhythmia\") != -1:\n                findings.append(SinusRhythmFinding.Arrhythmia)\n            if c.find(\"bradycardia\") != -1:\n                findings.append(SinusRhythmFinding.Bradycardia)\n            if c.find(\"tachycardia\") != -1:\n                findings.append(SinusRhythmFinding.Tachycardia)\n            if (c.find(\"normal\") != -1) and not (c.find(\"abnormal\") != -1):\n                findings.append(SinusRhythmFinding.Normal)\n    return findings\n\n\n# Example usage\ncomments = extract_findings(athlete_ecg_df.sample()['machine'].values[0])\nsinus_findings = classifySinusRhythmFindings(comments)\nprint(sinus_findings)\nprint(comments)\n\n[&lt;SinusRhythmFinding.Arrhythmia: 3&gt;, &lt;SinusRhythmFinding.Bradycardia: 1&gt;]\n['Sinus bradycardia with marked sinus arrhythmia', 'Otherwise normal ECG']\n\n\n\n\nAdd sinus rhythm finding labels to pandas dataframe\n# Get a list of sinus rhythm findings for every cardiologist record\nsinus_rhythm_findings_c = list(map(lambda x: classifySinusRhythmFindings( extract_findings(x, follow_on=False) ), athlete_ecg_df.cardiologist))\nsinus_rhythm_findings_sl12 = list(map(lambda x: classifySinusRhythmFindings( extract_findings(x, follow_on=True) ), athlete_ecg_df.machine))\n\n# Convert to boolean flag for each finding\nnormal_flags = []\nbradycardia_flags = []\ntachycardia_flags = []\narrhythmia_flags = []\nnormal_flags_sl12 = []\nbradycardia_flags_sl12 = []\ntachycardia_flags_sl12 = []\narrhythmia_flags_sl12 = []\nfor lst in sinus_rhythm_findings_c:\n    normal_flags.append(True) if SinusRhythmFinding.Normal in lst else normal_flags.append(False)\n    bradycardia_flags.append(True) if SinusRhythmFinding.Bradycardia in lst else bradycardia_flags.append(False)\n    tachycardia_flags.append(True) if SinusRhythmFinding.Tachycardia in lst else tachycardia_flags.append(False)\n    arrhythmia_flags.append(True) if SinusRhythmFinding.Arrhythmia in lst else arrhythmia_flags.append(False)\nfor lst in sinus_rhythm_findings_sl12:\n    normal_flags_sl12.append(True) if SinusRhythmFinding.Normal in lst else normal_flags_sl12.append(False)\n    bradycardia_flags_sl12.append(True) if SinusRhythmFinding.Bradycardia in lst else bradycardia_flags_sl12.append(False)\n    tachycardia_flags_sl12.append(True) if SinusRhythmFinding.Tachycardia in lst else tachycardia_flags_sl12.append(False)\n    arrhythmia_flags_sl12.append(True) if SinusRhythmFinding.Arrhythmia in lst else arrhythmia_flags_sl12.append(False)\n\n# Add each finding to dataframe as a new column\nathlete_ecg_df = athlete_ecg_df.assign(\n    sinus_rhythm_normal_c=normal_flags,\n    sinus_rhythm_bradycardia_c=bradycardia_flags,\n    sinus_rhythm_tachycardia_c=tachycardia_flags,\n    sinus_rhythm_arrhythmia_c=arrhythmia_flags,\n    sinus_rhythm_normal_sl12=normal_flags_sl12,\n    sinus_rhythm_bradycardia_sl12=bradycardia_flags_sl12,\n    sinus_rhythm_tachycardia_sl12=tachycardia_flags_sl12,\n    sinus_rhythm_arrhythmia_sl12=arrhythmia_flags_sl12,\n)\n\n\n\nathlete_ecg_df.head()\n\n\n\n\n\n\n\n\nathlete_id\ncardiologist\nmachine\noverall_c\noverall_sl12\nsinus_rhythm_normal_c\nsinus_rhythm_bradycardia_c\nsinus_rhythm_tachycardia_c\nsinus_rhythm_arrhythmia_c\nsinus_rhythm_normal_sl12\nsinus_rhythm_bradycardia_sl12\nsinus_rhythm_tachycardia_sl12\nsinus_rhythm_arrhythmia_sl12\n\n\n\n\n0\nath_001\nC: Sinus arrhythmia, Normal ECG\nSL12: Sinus bradycardia with marked sinus arrh...\nNormal\nBorderline\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n1\nath_002\nC: Sinus arrhythmia, Right axis deviation, Nor...\nSL12: Sinus bradycardia with marked sinus arrh...\nNormal\nBorderline\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n2\nath_003\nC: Normal sinus rhythm, Left axis deviation, B...\nSL12: Sinus bradycardia with marked sinus arrh...\nBorderline\nAbnormal\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\n\n\n3\nath_004\nC: Normal sinus rhythm, Normal ECG\nSL12: Sinus bradycardia, Right axis deviation,...\nNormal\nBorderline\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n4\nath_005\nC: Sinus bradycardia, normal sinus rhythm, Fir...\nSL12: Sinus bradycardia and sinus arrhythmia a...\nNormal\nNormal\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue"
  },
  {
    "objectID": "nbs/Marquette-SL12-misclassification.html#exporting-the-labelled-dataset",
    "href": "nbs/Marquette-SL12-misclassification.html#exporting-the-labelled-dataset",
    "title": "ECG machines are confused by athlete hearts",
    "section": "Exporting the labelled dataset",
    "text": "Exporting the labelled dataset"
  }
]